# plot3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(drift_estim),
#        col = "blue")
# points3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(b_values),
#        col = "green")
}
NbClass <- length(labels)
Drift_a_hat <- list()  # List of estimated coefficients for the drift per class
Kdrift <- integer(NbClass)  # List for selected value of dimension K per class
N <- ncol(Xtrain)  # Number of observed trajectories
n <- nrow(Xtrain)  # Number of observations per trajectory
TimeStep <- 1 / n  # Time stamp
L <- log(N)  # Bound corresponding in the paper to ANi.log(Ni)
classified_data_list <- list()  # List of iXtrain so that we don't need to compute them again
b_spline_basis_drift_list <- list()
SetK <- c(64)
for (i in seq_along(labels)){
############################################################################
############################################################################
########## Computation of the drift spline #################################
############################################################################
############################################################################
cat('\n-----Beginning Drift estimation-----\n')
cat('\n-----Class number', i, '-----\n')
iXtrain <- Xtrain[, which(ytrain == labels[i])]
classified_data_list[[i]] <- iXtrain
N_i <- ncol(iXtrain)
SupInt <- log(N_i)
InfInt <- -SupInt
# iZ <- zfun_bis(iXtrain, TimeStep)
iZ <- zfun_authors(iXtrain, TimeStep)
cat('\n-----K value selection-----\n')
Kdrift[i] <- selectdimdrift_authors(iXtrain, 0.1, SetK,
M, InfInt, SupInt, TimeStep, L)
cat('\n-----Selected value K : ', Kdrift[i], '-----\n')
iB <- bfun_authors(iXtrain, InfInt, SupInt, Kdrift[i], M)
Drift_a_hat[[i]] <- optimfun(iB, iZ, Kdrift[i], M, L)
drift_estim <- matrix(0, nrow = n-2, ncol = N_i)
for (j in 1:N_i){
drift_estim[, j] <- driftspline_authors(iXtrain[1:(n-2), j], Drift_a_hat[[i]],
InfInt, SupInt, Kdrift[i], M, L)
}
############################################################################
############################################################################
########## Computation of the drift real values ############################
############################################################################
############################################################################
calculate_b_values <- function(Xtrain, label, labels) {
# Get the number of rows and columns in iXtrain_adapted
N <- ncol(Xtrain)
n <- nrow(Xtrain)
# Initialize a matrix to store the results
results <- matrix(0, nrow = n, ncol = N)
# Loop over each time and each column of iXtrain_adapted to calculate b_time
for (j in 1:N) {
for (i in 1:n) {
# Calculate b_time for each combination of time and X_t value
results[i, j] <- b_orstein(Xtrain[i, j], label, labels)
}
}
return(results)
}
b_values <- calculate_b_values(iXtrain[1:(n-2), ], labels[i], labels)
b_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(b_values),
Type = "Drift",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Create data frame for zfun values
bspline_drift_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(drift_estim),
Type = "Increment",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Combine both data frames
combined_df <- rbind(bspline_drift_df,b_df)
p2 <-ggplot(combined_df, aes(x = X, y = Value, color = Type, group = interaction(Type, Group))) +
geom_point(size = 1.5, alpha = 0.7, show.legend = FALSE) +
labs(
title = "Drift and Increment Values for Each Trajectory in Xtrain",
x = "Process X",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "none")
#theme(legend.position = "right") +
#guides(color = guide_legend(title = "Trajectory"))
print(p2)
# df <- data.frame(
# x = as.vector(iXtrain_adapted),
# y = as.vector(rep(times[1:(n-1)], N_i)),
# z = as.vector(drift_estim)
# )
# library(rgl)
# # Plot using plotly's heatmap
# plot3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(drift_estim),
#        col = "blue")
# points3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(b_values),
#        col = "green")
}
t0 <- 0
T <- 1
x0 <- 0
n <- 100
Ni_train_list <- c(100, 100, 100)
Ni_test_list <- c(100, 100, 100)
labels <- c(1, 2, 3)
theta <- c(-4, 1, 4)
SetK <- 2^(0:4)
sigma_orstein <- 1
# simulation_result <- simulation_sde_time(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels,
#                                          b_time, sigma_time, theta, plot = FALSE)
# simulation_result <- simulation_sde(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels,
#                                          b_prime, sigma, theta)
simulation_result <- simulation_sde_orstein(t0, T, x0, n, Ni_train_list,
Ni_test_list, labels,
b_orstein, sigma_orstein, theta,
plot = FALSE)
# simulation_result <- simulation_sde_mix(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels, b,
#                                          b_orstein, sigma_orstein, theta)
Xtrain <- simulation_result$Xtrain
ytrain <- simulation_result$ytrain
Xtest <- simulation_result$Xtest
ytest <- simulation_result$ytest
NbClass <- length(labels)
Drift_a_hat <- list()  # List of estimated coefficients for the drift per class
Kdrift <- integer(NbClass)  # List for selected value of dimension K per class
N <- ncol(Xtrain)  # Number of observed trajectories
n <- nrow(Xtrain)  # Number of observations per trajectory
TimeStep <- 1 / n  # Time stamp
L <- log(N)  # Bound corresponding in the paper to ANi.log(Ni)
classified_data_list <- list()  # List of iXtrain so that we don't need to compute them again
b_spline_basis_drift_list <- list()
SetK <- c(64)
for (i in seq_along(labels)){
############################################################################
############################################################################
########## Computation of the drift spline #################################
############################################################################
############################################################################
cat('\n-----Beginning Drift estimation-----\n')
cat('\n-----Class number', i, '-----\n')
iXtrain <- Xtrain[, which(ytrain == labels[i])]
classified_data_list[[i]] <- iXtrain
N_i <- ncol(iXtrain)
SupInt <- log(N_i)
InfInt <- -SupInt
# iZ <- zfun_bis(iXtrain, TimeStep)
iZ <- zfun_authors(iXtrain, TimeStep)
cat('\n-----K value selection-----\n')
Kdrift[i] <- selectdimdrift_authors(iXtrain, 0.1, SetK,
M, InfInt, SupInt, TimeStep, L)
cat('\n-----Selected value K : ', Kdrift[i], '-----\n')
iB <- bfun_authors(iXtrain, InfInt, SupInt, Kdrift[i], M)
Drift_a_hat[[i]] <- optimfun(iB, iZ, Kdrift[i], M, L)
drift_estim <- matrix(0, nrow = n-2, ncol = N_i)
for (j in 1:N_i){
drift_estim[, j] <- driftspline_authors(iXtrain[1:(n-2), j], Drift_a_hat[[i]],
InfInt, SupInt, Kdrift[i], M, L)
}
############################################################################
############################################################################
########## Computation of the drift real values ############################
############################################################################
############################################################################
calculate_b_values <- function(Xtrain, label, labels) {
# Get the number of rows and columns in iXtrain_adapted
N <- ncol(Xtrain)
n <- nrow(Xtrain)
# Initialize a matrix to store the results
results <- matrix(0, nrow = n, ncol = N)
# Loop over each time and each column of iXtrain_adapted to calculate b_time
for (j in 1:N) {
for (i in 1:n) {
# Calculate b_time for each combination of time and X_t value
results[i, j] <- b_orstein(Xtrain[i, j], label, labels)
}
}
return(results)
}
b_values <- calculate_b_values(iXtrain[1:(n-2), ], labels[i], labels)
b_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(b_values),
Type = "Drift",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Create data frame for zfun values
bspline_drift_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(drift_estim),
Type = "Increment",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Combine both data frames
combined_df <- rbind(bspline_drift_df,b_df)
p2 <-ggplot(combined_df, aes(x = X, y = Value, color = Type, group = interaction(Type, Group))) +
geom_point(size = 1.5, alpha = 0.7, show.legend = FALSE) +
labs(
title = "Drift and Increment Values for Each Trajectory in Xtrain",
x = "Process X",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "none")
#theme(legend.position = "right") +
#guides(color = guide_legend(title = "Trajectory"))
print(p2)
# df <- data.frame(
# x = as.vector(iXtrain_adapted),
# y = as.vector(rep(times[1:(n-1)], N_i)),
# z = as.vector(drift_estim)
# )
# library(rgl)
# # Plot using plotly's heatmap
# plot3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(drift_estim),
#        col = "blue")
# points3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(b_values),
#        col = "green")
}
# classification_result <- sde_classif_time(Xtrain, ytrain, Xtest, ytest, SetK,
#                                           labels, M = 3, overfit_check = TRUE)
classification_result <- sde_classif_authors(Xtrain, ytrain, Xtest, ytest, SetK,
labels, M = 3, overfit_check = TRUE)
predicted_labels <- classification_result$PredClass
predicted_labels_train <- classification_result$PredClass_train
accuracy <- function(y_real, predictions) {
mean(y_real == predictions)
}
accuracy_value <- accuracy(ytest, predicted_labels)
# Print the accuracy and misclassification ratio
cat('Accuracy of the estimated classifier: ', accuracy_value * 100, '%\n')
cat('Misclassification ratio of the estimated classifier: ', (1 - accuracy_value) * 100, '%\n')
cat('Values N_i used for the training:', Ni_train_list)
t0 <- 0
T <- 1
x0 <- 0
n <- 100
Ni_train_list <- c(100, 100, 100)
Ni_test_list <- c(100, 100, 100)
labels <- c(1, 2, 3)
theta <- c(-4, 1, 4)
SetK <- 2^(0:4)
sigma_orstein <- 1/2
# simulation_result <- simulation_sde_time(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels,
#                                          b_time, sigma_time, theta, plot = FALSE)
# simulation_result <- simulation_sde(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels,
#                                          b_prime, sigma, theta)
simulation_result <- simulation_sde_orstein(t0, T, x0, n, Ni_train_list,
Ni_test_list, labels,
b_orstein, sigma_orstein, theta,
plot = TRUE)
# simulation_result <- simulation_sde_mix(t0, T, x0, n, Ni_train_list,
#                                          Ni_test_list, labels, b,
#                                          b_orstein, sigma_orstein, theta)
Xtrain <- simulation_result$Xtrain
ytrain <- simulation_result$ytrain
Xtest <- simulation_result$Xtest
ytest <- simulation_result$ytest
# classification_result <- sde_classif_time(Xtrain, ytrain, Xtest, ytest, SetK,
#                                           labels, M = 3, overfit_check = TRUE)
classification_result <- sde_classif_authors(Xtrain, ytrain, Xtest, ytest, SetK,
labels, M = 3, overfit_check = TRUE)
predicted_labels <- classification_result$PredClass
predicted_labels_train <- classification_result$PredClass_train
accuracy <- function(y_real, predictions) {
mean(y_real == predictions)
}
accuracy_value <- accuracy(ytest, predicted_labels)
# Print the accuracy and misclassification ratio
cat('Accuracy of the estimated classifier: ', accuracy_value * 100, '%\n')
cat('Misclassification ratio of the estimated classifier: ', (1 - accuracy_value) * 100, '%\n')
cat('Values N_i used for the training:', Ni_train_list)
NbClass <- length(labels)
Drift_a_hat <- list()  # List of estimated coefficients for the drift per class
Kdrift <- integer(NbClass)  # List for selected value of dimension K per class
N <- ncol(Xtrain)  # Number of observed trajectories
n <- nrow(Xtrain)  # Number of observations per trajectory
TimeStep <- 1 / n  # Time stamp
L <- log(N)  # Bound corresponding in the paper to ANi.log(Ni)
classified_data_list <- list()  # List of iXtrain so that we don't need to compute them again
b_spline_basis_drift_list <- list()
SetK <- c(64)
for (i in seq_along(labels)){
############################################################################
############################################################################
########## Computation of the drift spline #################################
############################################################################
############################################################################
cat('\n-----Beginning Drift estimation-----\n')
cat('\n-----Class number', i, '-----\n')
iXtrain <- Xtrain[, which(ytrain == labels[i])]
classified_data_list[[i]] <- iXtrain
N_i <- ncol(iXtrain)
SupInt <- log(N_i)
InfInt <- -SupInt
# iZ <- zfun_bis(iXtrain, TimeStep)
iZ <- zfun_authors(iXtrain, TimeStep)
cat('\n-----K value selection-----\n')
Kdrift[i] <- selectdimdrift_authors(iXtrain, 0.1, SetK,
M, InfInt, SupInt, TimeStep, L)
cat('\n-----Selected value K : ', Kdrift[i], '-----\n')
iB <- bfun_authors(iXtrain, InfInt, SupInt, Kdrift[i], M)
Drift_a_hat[[i]] <- optimfun(iB, iZ, Kdrift[i], M, L)
drift_estim <- matrix(0, nrow = n-2, ncol = N_i)
for (j in 1:N_i){
drift_estim[, j] <- driftspline_authors(iXtrain[1:(n-2), j], Drift_a_hat[[i]],
InfInt, SupInt, Kdrift[i], M, L)
}
############################################################################
############################################################################
########## Computation of the drift real values ############################
############################################################################
############################################################################
calculate_b_values <- function(Xtrain, label, labels) {
# Get the number of rows and columns in iXtrain_adapted
N <- ncol(Xtrain)
n <- nrow(Xtrain)
# Initialize a matrix to store the results
results <- matrix(0, nrow = n, ncol = N)
# Loop over each time and each column of iXtrain_adapted to calculate b_time
for (j in 1:N) {
for (i in 1:n) {
# Calculate b_time for each combination of time and X_t value
results[i, j] <- b_orstein(Xtrain[i, j], label, labels)
}
}
return(results)
}
b_values <- calculate_b_values(iXtrain[1:(n-2), ], labels[i], labels)
b_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(b_values),
Type = "Drift",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Create data frame for zfun values
bspline_drift_df <- data.frame(
X = as.vector(iXtrain[1:(n-2), ]),
Value = as.vector(drift_estim),
Type = "Increment",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-2)
)
# Combine both data frames
combined_df <- rbind(bspline_drift_df,b_df)
p2 <-ggplot(combined_df, aes(x = X, y = Value, color = Type, group = interaction(Type, Group))) +
geom_point(size = 1.5, alpha = 0.7, show.legend = FALSE) +
labs(
title = "Drift and Increment Values for Each Trajectory in Xtrain",
x = "Process X",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "none")
#theme(legend.position = "right") +
#guides(color = guide_legend(title = "Trajectory"))
print(p2)
# df <- data.frame(
# x = as.vector(iXtrain_adapted),
# y = as.vector(rep(times[1:(n-1)], N_i)),
# z = as.vector(drift_estim)
# )
# library(rgl)
# # Plot using plotly's heatmap
# plot3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(drift_estim),
#        col = "blue")
# points3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(b_values),
#        col = "green")
}
NbClass <- length(labels)
Drift_a_hat <- list()  # List of estimated coefficients for the drift per class
Kdrift <- integer(NbClass)  # List for selected value of dimension K per class
N <- ncol(Xtrain)  # Number of observed trajectories
n <- nrow(Xtrain)  # Number of observations per trajectory
TimeStep <- 1 / n  # Time stamp
L <- log(N)  # Bound corresponding in the paper to ANi.log(Ni)
classified_data_list <- list()  # List of iXtrain so that we don't need to compute them again
b_spline_basis_drift_list <- list()
times <- seq(0, 1, length.out = n)
SetK <- c(64)
for (i in seq_along(theta)){
############################################################################
############################################################################
########## Computation of the drift spline #################################
############################################################################
############################################################################
cat('\n-----Beginning Drift estimation-----\n')
cat('\n-----Class number', i, '-----\n')
iXtrain <- Xtrain[, which(ytrain == labels[i])]
classified_data_list[[i]] <- iXtrain
N_i <- ncol(iXtrain)
SupInt <- log(N_i)
InfInt <- -SupInt
# iZ <- zfun_bis(iXtrain, TimeStep)
iZ <- zfun(iXtrain, TimeStep)
cat('\n-----K value selection-----\n')
Kdrift[i] <- selectdimdrift_time(iXtrain[1:(n-1), ], times[1:(n-1)], iZ,
0.1, SetK, InfInt, SupInt, TimeStep, M, L)
b_spline_basis_drift_list[[i]] <- create_bspline_basis(rangeval = c(InfInt, SupInt),
nbasis = Kdrift[i] + M,
degree = M)
cat('\n-----Selected value K : ', Kdrift[i], '-----\n')
iB <- bfun_time(iXtrain[1:(n-1), ], times[1:(n-1)],
b_spline_basis_drift_list[[i]], InfInt,
SupInt, Kdrift[i], M)
Drift_a_hat[[i]] <- optimfun(iB, iZ, Kdrift[i], M, L)
drift_estim <- matrix(0, nrow = n-1, ncol = N_i)
for (j in 1:N_i){
drift_estim[, j] <- driftspline_time(iXtrain[1:(n-1), j],times[1:(n-1)], Drift_a_hat[[i]],
b_spline_basis_drift_list[[i]],
InfInt, SupInt, L)
}
############################################################################
############################################################################
########## Computation of the drift real values ############################
############################################################################
############################################################################
calculate_b_values <- function(Xtrain, label, labels) {
# Get the number of rows and columns in iXtrain_adapted
N <- ncol(Xtrain)
n <- nrow(Xtrain)
# Initialize a matrix to store the results
results <- matrix(0, nrow = n, ncol = N)
# Loop over each time and each column of iXtrain_adapted to calculate b_time
for (j in 1:N) {
for (i in 1:n) {
# Calculate b_time for each combination of time and X_t value
results[i, j] <- b_orstein(Xtrain[i, j], label, labels)
}
}
return(results)
}
b_values <- calculate_b_values(iXtrain[1:(n-1), ], labels[i], labels)
b_df <- data.frame(
X = as.vector(iXtrain[1:(n-1), ]),
Value = as.vector(b_values),
Type = "Drift",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-1)
)
# Create data frame for zfun values
bspline_drift_df <- data.frame(
X = as.vector(iXtrain[1:(n-1), ]),
Value = as.vector(drift_estim),
Type = "Increment",  # Adding a type column to distinguish between b and zfun
Group = rep(1:ncol(iXtrain), each = n-1)
)
# Combine both data frames
combined_df <- rbind(bspline_drift_df,b_df)
p2 <-ggplot(combined_df, aes(x = X, y = Value, color = Type, group = interaction(Type, Group))) +
geom_point(size = 1.5, alpha = 0.7, show.legend = FALSE) +
labs(
title = "Drift and Increment Values for Each Trajectory in Xtrain",
x = "Process X",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "none")
#theme(legend.position = "right") +
#guides(color = guide_legend(title = "Trajectory"))
print(p2)
# df <- data.frame(
# x = as.vector(iXtrain_adapted),
# y = as.vector(rep(times[1:(n-1)], N_i)),
# z = as.vector(drift_estim)
# )
# library(rgl)
# # Plot using plotly's heatmap
# plot3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(drift_estim),
#        col = "blue")
# points3d(x = as.vector(iXtrain_adapted),
#        y = as.vector(rep(times[1:(n-1)], N_i)),
#        z = as.vector(b_values),
#        col = "green")
}
classification_result <- sde_classif_time(Xtrain, ytrain, Xtest, ytest, SetK,
labels, M = 3, overfit_check = TRUE)
# classification_result <- sde_classif_authors(Xtrain, ytrain, Xtest, ytest, SetK,
#                                           labels, M = 3, overfit_check = TRUE)
predicted_labels <- classification_result$PredClass
predicted_labels_train <- classification_result$PredClass_train
accuracy <- function(y_real, predictions) {
mean(y_real == predictions)
}
accuracy_value <- accuracy(ytest, predicted_labels)
# Print the accuracy and misclassification ratio
cat('Accuracy of the estimated classifier: ', accuracy_value * 100, '%\n')
cat('Misclassification ratio of the estimated classifier: ', (1 - accuracy_value) * 100, '%\n')
cat('Values N_i used for the training:', Ni_train_list)
